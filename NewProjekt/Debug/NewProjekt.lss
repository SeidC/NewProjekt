
NewProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000728  000007bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800064  00800064  000007c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a1  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000219  00000000  00000000  00000f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063c  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000068a6  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000317  00000000  00000000  0000819e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000084b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000237a  00000000  00000000  00008535  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 92 03 	jmp	0x724	; 0x724 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include "Pwm.h"
#include <avr/delay.h>

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2e 97       	sbiw	r28, 0x0e	; 14
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
  a6:	87 e3       	ldi	r24, 0x37	; 55
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
    
    Pwm_Init(PWM_CHANNEL_0,PWM_FAST_MODE,PWM_CH0_PRE_SCALER_64);
  b0:	43 e0       	ldi	r20, 0x03	; 3
  b2:	68 e4       	ldi	r22, 0x48	; 72
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Pwm_Init>

    Pwm_SetPwmDutyCycle(PWM_CHANNEL_0,50);
  ba:	62 e3       	ldi	r22, 0x32	; 50
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 09 02 	call	0x412	; 0x412 <Pwm_SetPwmDutyCycle>
    Pwm_SetActivationStatus(PWM_CHANNEL_0,PWM_ENABLE);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 93 01 	call	0x326	; 0x326 <Pwm_SetActivationStatus>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	a8 ec       	ldi	r26, 0xC8	; 200
  d0:	b2 e4       	ldi	r27, 0x42	; 66
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	ab 83       	std	Y+3, r26	; 0x03
  d8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	4a e7       	ldi	r20, 0x7A	; 122
  e0:	55 e4       	ldi	r21, 0x45	; 69
  e2:	69 81       	ldd	r22, Y+1	; 0x01
  e4:	7a 81       	ldd	r23, Y+2	; 0x02
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	9c 81       	ldd	r25, Y+4	; 0x04
  ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__mulsf3>
  ee:	dc 01       	movw	r26, r24
  f0:	cb 01       	movw	r24, r22
  f2:	8d 83       	std	Y+5, r24	; 0x05
  f4:	9e 83       	std	Y+6, r25	; 0x06
  f6:	af 83       	std	Y+7, r26	; 0x07
  f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5f e3       	ldi	r21, 0x3F	; 63
 102:	6d 81       	ldd	r22, Y+5	; 0x05
 104:	7e 81       	ldd	r23, Y+6	; 0x06
 106:	8f 81       	ldd	r24, Y+7	; 0x07
 108:	98 85       	ldd	r25, Y+8	; 0x08
 10a:	0e 94 77 02 	call	0x4ee	; 0x4ee <__cmpsf2>
 10e:	88 23       	and	r24, r24
 110:	2c f4       	brge	.+10     	; 0x11c <main+0x8a>
		__ticks = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9a 87       	std	Y+10, r25	; 0x0a
 118:	89 87       	std	Y+9, r24	; 0x09
 11a:	3f c0       	rjmp	.+126    	; 0x19a <main+0x108>
	else if (__tmp > 65535)
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	3f ef       	ldi	r19, 0xFF	; 255
 120:	4f e7       	ldi	r20, 0x7F	; 127
 122:	57 e4       	ldi	r21, 0x47	; 71
 124:	6d 81       	ldd	r22, Y+5	; 0x05
 126:	7e 81       	ldd	r23, Y+6	; 0x06
 128:	8f 81       	ldd	r24, Y+7	; 0x07
 12a:	98 85       	ldd	r25, Y+8	; 0x08
 12c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__gesf2>
 130:	18 16       	cp	r1, r24
 132:	4c f5       	brge	.+82     	; 0x186 <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e2       	ldi	r20, 0x20	; 32
 13a:	51 e4       	ldi	r21, 0x41	; 65
 13c:	69 81       	ldd	r22, Y+1	; 0x01
 13e:	7a 81       	ldd	r23, Y+2	; 0x02
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	9c 81       	ldd	r25, Y+4	; 0x04
 144:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__mulsf3>
 148:	dc 01       	movw	r26, r24
 14a:	cb 01       	movw	r24, r22
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fixunssfsi>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	9a 87       	std	Y+10, r25	; 0x0a
 15a:	89 87       	std	Y+9, r24	; 0x09
 15c:	0f c0       	rjmp	.+30     	; 0x17c <main+0xea>
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	9c 87       	std	Y+12, r25	; 0x0c
 164:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	8b 85       	ldd	r24, Y+11	; 0x0b
 168:	9c 85       	ldd	r25, Y+12	; 0x0c
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xd8>
 16e:	9c 87       	std	Y+12, r25	; 0x0c
 170:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	89 85       	ldd	r24, Y+9	; 0x09
 174:	9a 85       	ldd	r25, Y+10	; 0x0a
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	9a 87       	std	Y+10, r25	; 0x0a
 17a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	89 85       	ldd	r24, Y+9	; 0x09
 17e:	9a 85       	ldd	r25, Y+10	; 0x0a
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	69 f7       	brne	.-38     	; 0x15e <main+0xcc>
    while(1)
    {
        _delay_ms(100);
        //TODO:: Please write your application code 
    }
 184:	a2 cf       	rjmp	.-188    	; 0xca <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 186:	6d 81       	ldd	r22, Y+5	; 0x05
 188:	7e 81       	ldd	r23, Y+6	; 0x06
 18a:	8f 81       	ldd	r24, Y+7	; 0x07
 18c:	98 85       	ldd	r25, Y+8	; 0x08
 18e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fixunssfsi>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	9a 87       	std	Y+10, r25	; 0x0a
 198:	89 87       	std	Y+9, r24	; 0x09
 19a:	89 85       	ldd	r24, Y+9	; 0x09
 19c:	9a 85       	ldd	r25, Y+10	; 0x0a
 19e:	9e 87       	std	Y+14, r25	; 0x0e
 1a0:	8d 87       	std	Y+13, r24	; 0x0d
 1a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x114>
 1aa:	9e 87       	std	Y+14, r25	; 0x0e
 1ac:	8d 87       	std	Y+13, r24	; 0x0d
 1ae:	8d cf       	rjmp	.-230    	; 0xca <main+0x38>

000001b0 <Pwm_Init>:
                        .portPin            = PWM_OCR2_PORT,
                      },
};

void Pwm_Init(Pwm_Channel_t Pwm_channel, Pwm_Mode_t Pwm_mode, Pwm_PreScaler_t Pwm_preScaler)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <Pwm_Init+0x6>
 1b6:	1f 92       	push	r1
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	6a 83       	std	Y+2, r22	; 0x02
 1c0:	4b 83       	std	Y+3, r20	; 0x03
	 Pwm_EnableOrcPort(Pwm_channel);
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	0e 94 3e 02 	call	0x47c	; 0x47c <Pwm_EnableOrcPort>
     Pwm_SetPwmRegister(Pwm_channel);
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Pwm_SetPwmRegister>
     Pwm_SetPwmMode(Pwm_channel,Pwm_mode);
 1ce:	6a 81       	ldd	r22, Y+2	; 0x02
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Pwm_SetPwmMode>
     Pwm_SetPwmPrescaler(Pwm_channel,Pwm_preScaler);     
 1d6:	6b 81       	ldd	r22, Y+3	; 0x03
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	0e 94 db 01 	call	0x3b6	; 0x3b6 <Pwm_SetPwmPrescaler>
     TCCR0 |= (1<<COM01);
 1de:	83 e5       	ldi	r24, 0x53	; 83
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	23 e5       	ldi	r18, 0x53	; 83
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	20 62       	ori	r18, 0x20	; 32
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
     return;
 1f0:	00 00       	nop
}
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <Pwm_SetPwmRegister>:


void Pwm_SetPwmRegister(Pwm_Channel_t Pwm_channel)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	1f 92       	push	r1
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	89 83       	std	Y+1, r24	; 0x01
    switch (Pwm_channel)
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	88 2f       	mov	r24, r24
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	21 f0       	breq	.+8      	; 0x21c <Pwm_SetPwmRegister+0x1e>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	91 05       	cpc	r25, r1
 218:	d1 f0       	breq	.+52     	; 0x24e <Pwm_SetPwmRegister+0x50>
            Pwm_channel2.ocrReg  = (vuint8_t*)&OCR2;
            Pwm_channel2.ddrReg  = (vuint8_t*)&DDRD;
        break;
        default:
            /*--- Do Nothing ----*/
        break;
 21a:	32 c0       	rjmp	.+100    	; 0x280 <Pwm_SetPwmRegister+0x82>
void Pwm_SetPwmRegister(Pwm_Channel_t Pwm_channel)
{
    switch (Pwm_channel)
    {
        case PWM_CHANNEL_0:
            Pwm_channel0.tccrReg  = (vuint8_t*)&TCCR0;
 21c:	83 e5       	ldi	r24, 0x53	; 83
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 65 00 	sts	0x0065, r25
 224:	80 93 64 00 	sts	0x0064, r24
            Pwm_channel0.tcntReg  = (vuint8_t*)&TCNT0;
 228:	82 e5       	ldi	r24, 0x52	; 82
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 67 00 	sts	0x0067, r25
 230:	80 93 66 00 	sts	0x0066, r24
            Pwm_channel0.ocrReg   = (vuint8_t*)&OCR0;
 234:	8c e5       	ldi	r24, 0x5C	; 92
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 69 00 	sts	0x0069, r25
 23c:	80 93 68 00 	sts	0x0068, r24
            Pwm_channel0.ddrReg  =  (vuint8_t*)&DDRB;
 240:	87 e3       	ldi	r24, 0x37	; 55
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 6b 00 	sts	0x006B, r25
 248:	80 93 6a 00 	sts	0x006A, r24
        break;
 24c:	19 c0       	rjmp	.+50     	; 0x280 <Pwm_SetPwmRegister+0x82>
        case PWM_CHANNEL_2:
            Pwm_channel2.tccrReg = (vuint8_t*)&TCCR2;
 24e:	85 e4       	ldi	r24, 0x45	; 69
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 6d 00 	sts	0x006D, r25
 256:	80 93 6c 00 	sts	0x006C, r24
            Pwm_channel2.tcntReg = (vuint8_t*)&TCNT2;
 25a:	84 e4       	ldi	r24, 0x44	; 68
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	90 93 6f 00 	sts	0x006F, r25
 262:	80 93 6e 00 	sts	0x006E, r24
            Pwm_channel2.ocrReg  = (vuint8_t*)&OCR2;
 266:	83 e4       	ldi	r24, 0x43	; 67
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 71 00 	sts	0x0071, r25
 26e:	80 93 70 00 	sts	0x0070, r24
            Pwm_channel2.ddrReg  = (vuint8_t*)&DDRD;
 272:	81 e3       	ldi	r24, 0x31	; 49
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 73 00 	sts	0x0073, r25
 27a:	80 93 72 00 	sts	0x0072, r24
        break;
 27e:	00 00       	nop
        default:
            /*--- Do Nothing ----*/
        break;
        
    }
    return;
 280:	00 00       	nop
}
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <Pwm_GetChannel>:

Pwm_RegisterConfig_t* Pwm_GetChannel(Pwm_Channel_t Pwm_channel)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	1f 92       	push	r1
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	89 83       	std	Y+1, r24	; 0x01
    if(Pwm_channel == PWM_CHANNEL_0)
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	88 23       	and	r24, r24
 29a:	19 f4       	brne	.+6      	; 0x2a2 <Pwm_GetChannel+0x18>
    {
        return &Pwm_channel0;
 29c:	84 e6       	ldi	r24, 0x64	; 100
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <Pwm_GetChannel+0x28>
    }
    else if (Pwm_channel == PWM_CHANNEL_2)
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	19 f4       	brne	.+6      	; 0x2ae <Pwm_GetChannel+0x24>
    {
        return &Pwm_channel2;
 2a8:	8c e6       	ldi	r24, 0x6C	; 108
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <Pwm_GetChannel+0x28>
    else
    {
    /*--- Do Nothing ---*/    
    }
     
    return NULL;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
}
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <Pwm_GetChannelConfig>:


Pwm_Config_t* Pwm_GetChannelConfig(Pwm_Channel_t Pwm_channel)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	1f 92       	push	r1
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	89 83       	std	Y+1, r24	; 0x01
    return (Pwm_config + (uint8_t)Pwm_channel);
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	88 2f       	mov	r24, r24
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	80 5a       	subi	r24, 0xA0	; 160
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
}
 2d4:	0f 90       	pop	r0
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <Pwm_SetPwmMode>:


void Pwm_SetPwmMode(Pwm_Channel_t Pwm_channel, Pwm_Mode_t Pwm_mode)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <Pwm_SetPwmMode+0x6>
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <Pwm_SetPwmMode+0x8>
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	8b 83       	std	Y+3, r24	; 0x03
 2ea:	6c 83       	std	Y+4, r22	; 0x04
    Pwm_RegisterConfig_t* cfg;
    
    cfg = Pwm_GetChannel(Pwm_channel);
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	0e 94 45 01 	call	0x28a	; 0x28a <Pwm_GetChannel>
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
    SET_BITS(*cfg->tccrReg, (uint8_t)Pwm_mode);   
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	fc 01       	movw	r30, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	91 81       	ldd	r25, Z+1	; 0x01
 300:	29 81       	ldd	r18, Y+1	; 0x01
 302:	3a 81       	ldd	r19, Y+2	; 0x02
 304:	f9 01       	movw	r30, r18
 306:	20 81       	ld	r18, Z
 308:	31 81       	ldd	r19, Z+1	; 0x01
 30a:	f9 01       	movw	r30, r18
 30c:	30 81       	ld	r19, Z
 30e:	2c 81       	ldd	r18, Y+4	; 0x04
 310:	23 2b       	or	r18, r19
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
    
    return;
 316:	00 00       	nop
}
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <Pwm_SetActivationStatus>:


void Pwm_SetActivationStatus(Pwm_Channel_t Pwm_channel, Pwm_Activation_t status)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	00 d0       	rcall	.+0      	; 0x32c <Pwm_SetActivationStatus+0x6>
 32c:	00 d0       	rcall	.+0      	; 0x32e <Pwm_SetActivationStatus+0x8>
 32e:	00 d0       	rcall	.+0      	; 0x330 <Pwm_SetActivationStatus+0xa>
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	8d 83       	std	Y+5, r24	; 0x05
 336:	6e 83       	std	Y+6, r22	; 0x06
    Pwm_RegisterConfig_t* cfg;
    Pwm_Config_t* chCfg;
       
    cfg = Pwm_GetChannel(Pwm_channel);
 338:	8d 81       	ldd	r24, Y+5	; 0x05
 33a:	0e 94 45 01 	call	0x28a	; 0x28a <Pwm_GetChannel>
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
    chCfg = Pwm_GetChannelConfig(Pwm_channel);
 342:	8d 81       	ldd	r24, Y+5	; 0x05
 344:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Pwm_GetChannelConfig>
 348:	9c 83       	std	Y+4, r25	; 0x04
 34a:	8b 83       	std	Y+3, r24	; 0x03
       
    if(status == PWM_DISABLE)
 34c:	8e 81       	ldd	r24, Y+6	; 0x06
 34e:	88 23       	and	r24, r24
 350:	b1 f4       	brne	.+44     	; 0x37e <Pwm_SetActivationStatus+0x58>
    {
        RESET_BITS(*cfg->tccrReg,chCfg->preScaler);
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	9a 81       	ldd	r25, Y+2	; 0x02
 356:	fc 01       	movw	r30, r24
 358:	80 81       	ld	r24, Z
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	29 81       	ldd	r18, Y+1	; 0x01
 35e:	3a 81       	ldd	r19, Y+2	; 0x02
 360:	f9 01       	movw	r30, r18
 362:	20 81       	ld	r18, Z
 364:	31 81       	ldd	r19, Z+1	; 0x01
 366:	f9 01       	movw	r30, r18
 368:	20 81       	ld	r18, Z
 36a:	42 2f       	mov	r20, r18
 36c:	2b 81       	ldd	r18, Y+3	; 0x03
 36e:	3c 81       	ldd	r19, Y+4	; 0x04
 370:	f9 01       	movw	r30, r18
 372:	20 81       	ld	r18, Z
 374:	20 95       	com	r18
 376:	24 23       	and	r18, r20
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <Pwm_SetActivationStatus+0x7c>
    }
    else if (status == PWM_ENABLE)
 37e:	8e 81       	ldd	r24, Y+6	; 0x06
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	79 f4       	brne	.+30     	; 0x3a2 <Pwm_SetActivationStatus+0x7c>
    {
        SET_BITS(*cfg->tccrReg,PWM_PRE_SCALER_BIT_POS);
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	fc 01       	movw	r30, r24
 38a:	80 81       	ld	r24, Z
 38c:	91 81       	ldd	r25, Z+1	; 0x01
 38e:	29 81       	ldd	r18, Y+1	; 0x01
 390:	3a 81       	ldd	r19, Y+2	; 0x02
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	31 81       	ldd	r19, Z+1	; 0x01
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	23 60       	ori	r18, 0x03	; 3
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
    }
    else
    {
        /*--- Do Nothing ---*/
    }
    return;
 3a2:	00 00       	nop
}
 3a4:	26 96       	adiw	r28, 0x06	; 6
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <Pwm_SetPwmPrescaler>:


void Pwm_SetPwmPrescaler(Pwm_Channel_t Pwm_channel, Pwm_PreScaler_t Pwm_preScaler)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <Pwm_SetPwmPrescaler+0x6>
 3bc:	00 d0       	rcall	.+0      	; 0x3be <Pwm_SetPwmPrescaler+0x8>
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	8b 83       	std	Y+3, r24	; 0x03
 3c4:	6c 83       	std	Y+4, r22	; 0x04
    Pwm_Config_t* chCfg;
        
    chCfg = Pwm_GetChannelConfig(Pwm_channel);
 3c6:	8b 81       	ldd	r24, Y+3	; 0x03
 3c8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Pwm_GetChannelConfig>
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	89 83       	std	Y+1, r24	; 0x01
    if ((Pwm_channel == PWM_CHANNEL_0 && PWM_IsPreScalerInCh0Range(Pwm_preScaler)) ||
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	88 23       	and	r24, r24
 3d4:	31 f4       	brne	.+12     	; 0x3e2 <Pwm_SetPwmPrescaler+0x2c>
 3d6:	8c 81       	ldd	r24, Y+4	; 0x04
 3d8:	88 23       	and	r24, r24
 3da:	19 f0       	breq	.+6      	; 0x3e2 <Pwm_SetPwmPrescaler+0x2c>
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	86 30       	cpi	r24, 0x06	; 6
 3e0:	48 f0       	brcs	.+18     	; 0x3f4 <Pwm_SetPwmPrescaler+0x3e>
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	69 f4       	brne	.+26     	; 0x402 <Pwm_SetPwmPrescaler+0x4c>
        (Pwm_channel == PWM_CHANNEL_2 && PWM_IsPreScalerInCh2Range(Pwm_preScaler)))        
 3e8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ea:	81 32       	cpi	r24, 0x21	; 33
 3ec:	50 f0       	brcs	.+20     	; 0x402 <Pwm_SetPwmPrescaler+0x4c>
 3ee:	8c 81       	ldd	r24, Y+4	; 0x04
 3f0:	89 32       	cpi	r24, 0x29	; 41
 3f2:	38 f4       	brcc	.+14     	; 0x402 <Pwm_SetPwmPrescaler+0x4c>
    {
        chCfg->preScaler = (Pwm_preScaler & PWM_PRE_SCALER_MASK);    
 3f4:	8c 81       	ldd	r24, Y+4	; 0x04
 3f6:	28 2f       	mov	r18, r24
 3f8:	2f 70       	andi	r18, 0x0F	; 15
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
    }
       
   return;   
 402:	00 00       	nop
}
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <Pwm_SetPwmDutyCycle>:


void Pwm_SetPwmDutyCycle(Pwm_Channel_t Pwm_channel, uint8_t Pwm_dutyCycle)
{
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	00 d0       	rcall	.+0      	; 0x418 <Pwm_SetPwmDutyCycle+0x6>
 418:	00 d0       	rcall	.+0      	; 0x41a <Pwm_SetPwmDutyCycle+0x8>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	8b 83       	std	Y+3, r24	; 0x03
 420:	6c 83       	std	Y+4, r22	; 0x04
    
    Pwm_RegisterConfig_t* cfg_a = Pwm_GetChannel(Pwm_channel);
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	0e 94 45 01 	call	0x28a	; 0x28a <Pwm_GetChannel>
 428:	9a 83       	std	Y+2, r25	; 0x02
 42a:	89 83       	std	Y+1, r24	; 0x01

    if (Pwm_dutyCycle > 0 && Pwm_dutyCycle <= 100)
 42c:	8c 81       	ldd	r24, Y+4	; 0x04
 42e:	88 23       	and	r24, r24
 430:	f1 f0       	breq	.+60     	; 0x46e <__stack+0xf>
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	85 36       	cpi	r24, 0x65	; 101
 436:	d8 f4       	brcc	.+54     	; 0x46e <__stack+0xf>
    {   
        *(cfg_a->ocrReg) = ((uint8_t)(( PWM_MAX_DUTY_CYCLE * (uint16_t)Pwm_dutyCycle) / 100));
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	9a 81       	ldd	r25, Y+2	; 0x02
 43c:	fc 01       	movw	r30, r24
 43e:	44 81       	ldd	r20, Z+4	; 0x04
 440:	55 81       	ldd	r21, Z+5	; 0x05
 442:	8c 81       	ldd	r24, Y+4	; 0x04
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	6f ef       	ldi	r22, 0xFF	; 255
 44a:	62 9f       	mul	r22, r18
 44c:	c0 01       	movw	r24, r0
 44e:	63 9f       	mul	r22, r19
 450:	90 0d       	add	r25, r0
 452:	11 24       	eor	r1, r1
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	9c 01       	movw	r18, r24
 45e:	ab e7       	ldi	r26, 0x7B	; 123
 460:	b4 e1       	ldi	r27, 0x14	; 20
 462:	0e 94 83 03 	call	0x706	; 0x706 <__umulhisi3>
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	fa 01       	movw	r30, r20
 46c:	80 83       	st	Z, r24
    }                    
}
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <Pwm_EnableOrcPort>:
}



void Pwm_EnableOrcPort(Pwm_Channel_t Pwm_channel)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	00 d0       	rcall	.+0      	; 0x482 <Pwm_EnableOrcPort+0x6>
 482:	00 d0       	rcall	.+0      	; 0x484 <Pwm_EnableOrcPort+0x8>
 484:	1f 92       	push	r1
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	8d 83       	std	Y+5, r24	; 0x05
    Pwm_RegisterConfig_t* reg = Pwm_GetChannel(Pwm_channel);
 48c:	8d 81       	ldd	r24, Y+5	; 0x05
 48e:	0e 94 45 01 	call	0x28a	; 0x28a <Pwm_GetChannel>
 492:	9a 83       	std	Y+2, r25	; 0x02
 494:	89 83       	std	Y+1, r24	; 0x01
    Pwm_Config_t* conf = Pwm_GetChannelConfig(Pwm_channel);
 496:	8d 81       	ldd	r24, Y+5	; 0x05
 498:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Pwm_GetChannelConfig>
 49c:	9c 83       	std	Y+4, r25	; 0x04
 49e:	8b 83       	std	Y+3, r24	; 0x03
    
    SET_BIT(*reg->ddrReg,conf->portPin);
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	9a 81       	ldd	r25, Y+2	; 0x02
 4a4:	fc 01       	movw	r30, r24
 4a6:	86 81       	ldd	r24, Z+6	; 0x06
 4a8:	97 81       	ldd	r25, Z+7	; 0x07
 4aa:	29 81       	ldd	r18, Y+1	; 0x01
 4ac:	3a 81       	ldd	r19, Y+2	; 0x02
 4ae:	f9 01       	movw	r30, r18
 4b0:	26 81       	ldd	r18, Z+6	; 0x06
 4b2:	37 81       	ldd	r19, Z+7	; 0x07
 4b4:	f9 01       	movw	r30, r18
 4b6:	20 81       	ld	r18, Z
 4b8:	62 2f       	mov	r22, r18
 4ba:	2b 81       	ldd	r18, Y+3	; 0x03
 4bc:	3c 81       	ldd	r19, Y+4	; 0x04
 4be:	f9 01       	movw	r30, r18
 4c0:	21 81       	ldd	r18, Z+1	; 0x01
 4c2:	42 2f       	mov	r20, r18
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	04 2e       	mov	r0, r20
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <Pwm_EnableOrcPort+0x56>
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	0a 94       	dec	r0
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <Pwm_EnableOrcPort+0x52>
 4d6:	26 2b       	or	r18, r22
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
    return;
 4dc:	00 00       	nop
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <__cmpsf2>:
 4ee:	2f d0       	rcall	.+94     	; 0x54e <__fp_cmp>
 4f0:	08 f4       	brcc	.+2      	; 0x4f4 <__cmpsf2+0x6>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	08 95       	ret

000004f6 <__fixunssfsi>:
 4f6:	57 d0       	rcall	.+174    	; 0x5a6 <__fp_splitA>
 4f8:	88 f0       	brcs	.+34     	; 0x51c <__fixunssfsi+0x26>
 4fa:	9f 57       	subi	r25, 0x7F	; 127
 4fc:	90 f0       	brcs	.+36     	; 0x522 <__fixunssfsi+0x2c>
 4fe:	b9 2f       	mov	r27, r25
 500:	99 27       	eor	r25, r25
 502:	b7 51       	subi	r27, 0x17	; 23
 504:	a0 f0       	brcs	.+40     	; 0x52e <__fixunssfsi+0x38>
 506:	d1 f0       	breq	.+52     	; 0x53c <__fixunssfsi+0x46>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	1a f0       	brmi	.+6      	; 0x518 <__fixunssfsi+0x22>
 512:	ba 95       	dec	r27
 514:	c9 f7       	brne	.-14     	; 0x508 <__fixunssfsi+0x12>
 516:	12 c0       	rjmp	.+36     	; 0x53c <__fixunssfsi+0x46>
 518:	b1 30       	cpi	r27, 0x01	; 1
 51a:	81 f0       	breq	.+32     	; 0x53c <__fixunssfsi+0x46>
 51c:	5e d0       	rcall	.+188    	; 0x5da <__fp_zero>
 51e:	b1 e0       	ldi	r27, 0x01	; 1
 520:	08 95       	ret
 522:	5b c0       	rjmp	.+182    	; 0x5da <__fp_zero>
 524:	67 2f       	mov	r22, r23
 526:	78 2f       	mov	r23, r24
 528:	88 27       	eor	r24, r24
 52a:	b8 5f       	subi	r27, 0xF8	; 248
 52c:	39 f0       	breq	.+14     	; 0x53c <__fixunssfsi+0x46>
 52e:	b9 3f       	cpi	r27, 0xF9	; 249
 530:	cc f3       	brlt	.-14     	; 0x524 <__fixunssfsi+0x2e>
 532:	86 95       	lsr	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b3 95       	inc	r27
 53a:	d9 f7       	brne	.-10     	; 0x532 <__fixunssfsi+0x3c>
 53c:	3e f4       	brtc	.+14     	; 0x54c <__fixunssfsi+0x56>
 53e:	90 95       	com	r25
 540:	80 95       	com	r24
 542:	70 95       	com	r23
 544:	61 95       	neg	r22
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	08 95       	ret

0000054e <__fp_cmp>:
 54e:	99 0f       	add	r25, r25
 550:	00 08       	sbc	r0, r0
 552:	55 0f       	add	r21, r21
 554:	aa 0b       	sbc	r26, r26
 556:	e0 e8       	ldi	r30, 0x80	; 128
 558:	fe ef       	ldi	r31, 0xFE	; 254
 55a:	16 16       	cp	r1, r22
 55c:	17 06       	cpc	r1, r23
 55e:	e8 07       	cpc	r30, r24
 560:	f9 07       	cpc	r31, r25
 562:	c0 f0       	brcs	.+48     	; 0x594 <__fp_cmp+0x46>
 564:	12 16       	cp	r1, r18
 566:	13 06       	cpc	r1, r19
 568:	e4 07       	cpc	r30, r20
 56a:	f5 07       	cpc	r31, r21
 56c:	98 f0       	brcs	.+38     	; 0x594 <__fp_cmp+0x46>
 56e:	62 1b       	sub	r22, r18
 570:	73 0b       	sbc	r23, r19
 572:	84 0b       	sbc	r24, r20
 574:	95 0b       	sbc	r25, r21
 576:	39 f4       	brne	.+14     	; 0x586 <__fp_cmp+0x38>
 578:	0a 26       	eor	r0, r26
 57a:	61 f0       	breq	.+24     	; 0x594 <__fp_cmp+0x46>
 57c:	23 2b       	or	r18, r19
 57e:	24 2b       	or	r18, r20
 580:	25 2b       	or	r18, r21
 582:	21 f4       	brne	.+8      	; 0x58c <__fp_cmp+0x3e>
 584:	08 95       	ret
 586:	0a 26       	eor	r0, r26
 588:	09 f4       	brne	.+2      	; 0x58c <__fp_cmp+0x3e>
 58a:	a1 40       	sbci	r26, 0x01	; 1
 58c:	a6 95       	lsr	r26
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	81 1d       	adc	r24, r1
 592:	81 1d       	adc	r24, r1
 594:	08 95       	ret

00000596 <__fp_split3>:
 596:	57 fd       	sbrc	r21, 7
 598:	90 58       	subi	r25, 0x80	; 128
 59a:	44 0f       	add	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	59 f0       	breq	.+22     	; 0x5b6 <__fp_splitA+0x10>
 5a0:	5f 3f       	cpi	r21, 0xFF	; 255
 5a2:	71 f0       	breq	.+28     	; 0x5c0 <__fp_splitA+0x1a>
 5a4:	47 95       	ror	r20

000005a6 <__fp_splitA>:
 5a6:	88 0f       	add	r24, r24
 5a8:	97 fb       	bst	r25, 7
 5aa:	99 1f       	adc	r25, r25
 5ac:	61 f0       	breq	.+24     	; 0x5c6 <__fp_splitA+0x20>
 5ae:	9f 3f       	cpi	r25, 0xFF	; 255
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <__fp_splitA+0x2a>
 5b2:	87 95       	ror	r24
 5b4:	08 95       	ret
 5b6:	12 16       	cp	r1, r18
 5b8:	13 06       	cpc	r1, r19
 5ba:	14 06       	cpc	r1, r20
 5bc:	55 1f       	adc	r21, r21
 5be:	f2 cf       	rjmp	.-28     	; 0x5a4 <__fp_split3+0xe>
 5c0:	46 95       	lsr	r20
 5c2:	f1 df       	rcall	.-30     	; 0x5a6 <__fp_splitA>
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <__fp_splitA+0x30>
 5c6:	16 16       	cp	r1, r22
 5c8:	17 06       	cpc	r1, r23
 5ca:	18 06       	cpc	r1, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	f1 cf       	rjmp	.-30     	; 0x5b2 <__fp_splitA+0xc>
 5d0:	86 95       	lsr	r24
 5d2:	71 05       	cpc	r23, r1
 5d4:	61 05       	cpc	r22, r1
 5d6:	08 94       	sec
 5d8:	08 95       	ret

000005da <__fp_zero>:
 5da:	e8 94       	clt

000005dc <__fp_szero>:
 5dc:	bb 27       	eor	r27, r27
 5de:	66 27       	eor	r22, r22
 5e0:	77 27       	eor	r23, r23
 5e2:	cb 01       	movw	r24, r22
 5e4:	97 f9       	bld	r25, 7
 5e6:	08 95       	ret

000005e8 <__gesf2>:
 5e8:	b2 df       	rcall	.-156    	; 0x54e <__fp_cmp>
 5ea:	08 f4       	brcc	.+2      	; 0x5ee <__gesf2+0x6>
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	08 95       	ret

000005f0 <__mulsf3>:
 5f0:	0b d0       	rcall	.+22     	; 0x608 <__mulsf3x>
 5f2:	78 c0       	rjmp	.+240    	; 0x6e4 <__fp_round>
 5f4:	69 d0       	rcall	.+210    	; 0x6c8 <__fp_pscA>
 5f6:	28 f0       	brcs	.+10     	; 0x602 <__mulsf3+0x12>
 5f8:	6e d0       	rcall	.+220    	; 0x6d6 <__fp_pscB>
 5fa:	18 f0       	brcs	.+6      	; 0x602 <__mulsf3+0x12>
 5fc:	95 23       	and	r25, r21
 5fe:	09 f0       	breq	.+2      	; 0x602 <__mulsf3+0x12>
 600:	5a c0       	rjmp	.+180    	; 0x6b6 <__fp_inf>
 602:	5f c0       	rjmp	.+190    	; 0x6c2 <__fp_nan>
 604:	11 24       	eor	r1, r1
 606:	ea cf       	rjmp	.-44     	; 0x5dc <__fp_szero>

00000608 <__mulsf3x>:
 608:	c6 df       	rcall	.-116    	; 0x596 <__fp_split3>
 60a:	a0 f3       	brcs	.-24     	; 0x5f4 <__mulsf3+0x4>

0000060c <__mulsf3_pse>:
 60c:	95 9f       	mul	r25, r21
 60e:	d1 f3       	breq	.-12     	; 0x604 <__mulsf3+0x14>
 610:	95 0f       	add	r25, r21
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	55 1f       	adc	r21, r21
 616:	62 9f       	mul	r22, r18
 618:	f0 01       	movw	r30, r0
 61a:	72 9f       	mul	r23, r18
 61c:	bb 27       	eor	r27, r27
 61e:	f0 0d       	add	r31, r0
 620:	b1 1d       	adc	r27, r1
 622:	63 9f       	mul	r22, r19
 624:	aa 27       	eor	r26, r26
 626:	f0 0d       	add	r31, r0
 628:	b1 1d       	adc	r27, r1
 62a:	aa 1f       	adc	r26, r26
 62c:	64 9f       	mul	r22, r20
 62e:	66 27       	eor	r22, r22
 630:	b0 0d       	add	r27, r0
 632:	a1 1d       	adc	r26, r1
 634:	66 1f       	adc	r22, r22
 636:	82 9f       	mul	r24, r18
 638:	22 27       	eor	r18, r18
 63a:	b0 0d       	add	r27, r0
 63c:	a1 1d       	adc	r26, r1
 63e:	62 1f       	adc	r22, r18
 640:	73 9f       	mul	r23, r19
 642:	b0 0d       	add	r27, r0
 644:	a1 1d       	adc	r26, r1
 646:	62 1f       	adc	r22, r18
 648:	83 9f       	mul	r24, r19
 64a:	a0 0d       	add	r26, r0
 64c:	61 1d       	adc	r22, r1
 64e:	22 1f       	adc	r18, r18
 650:	74 9f       	mul	r23, r20
 652:	33 27       	eor	r19, r19
 654:	a0 0d       	add	r26, r0
 656:	61 1d       	adc	r22, r1
 658:	23 1f       	adc	r18, r19
 65a:	84 9f       	mul	r24, r20
 65c:	60 0d       	add	r22, r0
 65e:	21 1d       	adc	r18, r1
 660:	82 2f       	mov	r24, r18
 662:	76 2f       	mov	r23, r22
 664:	6a 2f       	mov	r22, r26
 666:	11 24       	eor	r1, r1
 668:	9f 57       	subi	r25, 0x7F	; 127
 66a:	50 40       	sbci	r21, 0x00	; 0
 66c:	8a f0       	brmi	.+34     	; 0x690 <__mulsf3_pse+0x84>
 66e:	e1 f0       	breq	.+56     	; 0x6a8 <__mulsf3_pse+0x9c>
 670:	88 23       	and	r24, r24
 672:	4a f0       	brmi	.+18     	; 0x686 <__mulsf3_pse+0x7a>
 674:	ee 0f       	add	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	bb 1f       	adc	r27, r27
 67a:	66 1f       	adc	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	91 50       	subi	r25, 0x01	; 1
 682:	50 40       	sbci	r21, 0x00	; 0
 684:	a9 f7       	brne	.-22     	; 0x670 <__mulsf3_pse+0x64>
 686:	9e 3f       	cpi	r25, 0xFE	; 254
 688:	51 05       	cpc	r21, r1
 68a:	70 f0       	brcs	.+28     	; 0x6a8 <__mulsf3_pse+0x9c>
 68c:	14 c0       	rjmp	.+40     	; 0x6b6 <__fp_inf>
 68e:	a6 cf       	rjmp	.-180    	; 0x5dc <__fp_szero>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	ec f3       	brlt	.-6      	; 0x68e <__mulsf3_pse+0x82>
 694:	98 3e       	cpi	r25, 0xE8	; 232
 696:	dc f3       	brlt	.-10     	; 0x68e <__mulsf3_pse+0x82>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	e7 95       	ror	r30
 6a4:	9f 5f       	subi	r25, 0xFF	; 255
 6a6:	c1 f7       	brne	.-16     	; 0x698 <__mulsf3_pse+0x8c>
 6a8:	fe 2b       	or	r31, r30
 6aa:	88 0f       	add	r24, r24
 6ac:	91 1d       	adc	r25, r1
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <__fp_inf>:
 6b6:	97 f9       	bld	r25, 7
 6b8:	9f 67       	ori	r25, 0x7F	; 127
 6ba:	80 e8       	ldi	r24, 0x80	; 128
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	08 95       	ret

000006c2 <__fp_nan>:
 6c2:	9f ef       	ldi	r25, 0xFF	; 255
 6c4:	80 ec       	ldi	r24, 0xC0	; 192
 6c6:	08 95       	ret

000006c8 <__fp_pscA>:
 6c8:	00 24       	eor	r0, r0
 6ca:	0a 94       	dec	r0
 6cc:	16 16       	cp	r1, r22
 6ce:	17 06       	cpc	r1, r23
 6d0:	18 06       	cpc	r1, r24
 6d2:	09 06       	cpc	r0, r25
 6d4:	08 95       	ret

000006d6 <__fp_pscB>:
 6d6:	00 24       	eor	r0, r0
 6d8:	0a 94       	dec	r0
 6da:	12 16       	cp	r1, r18
 6dc:	13 06       	cpc	r1, r19
 6de:	14 06       	cpc	r1, r20
 6e0:	05 06       	cpc	r0, r21
 6e2:	08 95       	ret

000006e4 <__fp_round>:
 6e4:	09 2e       	mov	r0, r25
 6e6:	03 94       	inc	r0
 6e8:	00 0c       	add	r0, r0
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__fp_round+0xc>
 6ec:	88 23       	and	r24, r24
 6ee:	52 f0       	brmi	.+20     	; 0x704 <__fp_round+0x20>
 6f0:	bb 0f       	add	r27, r27
 6f2:	40 f4       	brcc	.+16     	; 0x704 <__fp_round+0x20>
 6f4:	bf 2b       	or	r27, r31
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__fp_round+0x18>
 6f8:	60 ff       	sbrs	r22, 0
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <__fp_round+0x20>
 6fc:	6f 5f       	subi	r22, 0xFF	; 255
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <__umulhisi3>:
 706:	a2 9f       	mul	r26, r18
 708:	b0 01       	movw	r22, r0
 70a:	b3 9f       	mul	r27, r19
 70c:	c0 01       	movw	r24, r0
 70e:	a3 9f       	mul	r26, r19
 710:	70 0d       	add	r23, r0
 712:	81 1d       	adc	r24, r1
 714:	11 24       	eor	r1, r1
 716:	91 1d       	adc	r25, r1
 718:	b2 9f       	mul	r27, r18
 71a:	70 0d       	add	r23, r0
 71c:	81 1d       	adc	r24, r1
 71e:	11 24       	eor	r1, r1
 720:	91 1d       	adc	r25, r1
 722:	08 95       	ret

00000724 <_exit>:
 724:	f8 94       	cli

00000726 <__stop_program>:
 726:	ff cf       	rjmp	.-2      	; 0x726 <__stop_program>
